# -*- coding: utf-8 -*-
"""LRLIME.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jaseHKERDxJVIPgeaN6TOIDfIHXguOJ5

**CRITICAL COLOURS**

https://www.section.io/engineering-education/model-interpretation-using-lime/

IMPORT LIBRARIES
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib
import matplotlib.pyplot as plt

plt.switch_backend('Agg')
print("Using:",matplotlib.get_backend())

def perform_task_LR(array_inputs,df):
    #FROM HTML
    print(array_inputs)
    # Machine learning classification
    """READ DATA"""

    

    df.head()

    """DEFINE FEATURES AND TARGET"""

    X = df.loc[:, df.columns != 'Class']

    Y = df.iloc[:,-1]

    class_names = Y.unique()

    """SPLIT TRAIN AND TEST DATA"""

    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=7)

    X_train.shape

    model_logreg = LogisticRegression()

    """FIT MODEL"""

    model_logreg.fit(X_train, Y_train)

    """PREDICTION"""

    model_logreg.predict(X_test)

    """ACCURACY"""

    accuracy_score(Y_test,model_logreg.predict(X_test))

    """CONFUSION MATRIX"""

    confusion_matrix(Y, model_logreg.predict(X))

    import matplotlib.pyplot as plt
    cm = confusion_matrix(Y, model_logreg.predict(X))
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.imshow(cm)
    ax.grid(False)
    ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))
    ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))
    ax.set_ylim(1.5, -0.5)
    for i in range(2):
        for j in range(2):
            ax.text(j, i, cm[i, j], ha='center', va='center', color='red')
    plt.savefig("./images/confusion_matrix.jpg")

    print(classification_report(Y,model_logreg.predict(X)))

    """PREDICT NEW DATA"""

    #new_colour = np.array(X_test.iloc[2]).reshape(1,-1)
    new_colour = np.array(X_test.iloc[10]).reshape(1,-1)
    print("X_test.iloc[10]")
    print(new_colour)
    X_input_test = np.array(array_inputs)
    X_input_test = X_input_test.astype(np.float64)
    arr_2d = np.reshape(X_input_test,[1,19])
    return([model_logreg.predict(arr_2d),X_input_test])

    """INTERPRETE PREDICTION"""



    