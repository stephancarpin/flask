# -*- coding: utf-8 -*-
"""LRLIME.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jaseHKERDxJVIPgeaN6TOIDfIHXguOJ5

**CRITICAL COLOURS**

https://www.section.io/engineering-education/model-interpretation-using-lime/

IMPORT LIBRARIES
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib
import matplotlib.pyplot as plt
import pickle as pkl

plt.switch_backend('Agg')
print("Using:",matplotlib.get_backend())


model_logreg = LogisticRegression()

def initializtion():
    print('Initialization - Train Model(Machine learning classification)')
    
    #FROM HTML
    df= pd.read_csv('./data/DyeBatch.csv',header=0)

    headers = df.columns[0:7]

    # Machine learning classification
    """READ DATA"""



    df.head()

    """DEFINE FEATURES AND TARGET"""

    X = df.loc[:, df.columns != 'Reprocess']

    Y = df.iloc[:,-1]

    class_names = Y.unique()

    """SPLIT TRAIN AND TEST DATA"""

    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=7)

    #to save it
<<<<<<< HEAD
    #np.save('xtrain.npy', X_train)
=======
    print('type of xtrain')

    X_train.to_json('./data/X_train.json')
>>>>>>> lime

    
    
   
    

    """FIT MODEL"""

    model_logreg.fit(X_train, Y_train)

    """PREDICTION"""

    model_logreg.predict(X_test)

    """ACCURACY"""

    accuracy_score(Y_test,model_logreg.predict(X_test))

    """CONFUSION MATRIX"""

    confusion_matrix(Y, model_logreg.predict(X))

    import matplotlib.pyplot as plt
    cm = confusion_matrix(Y, model_logreg.predict(X))
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.imshow(cm)
    ax.grid(False)
    ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))
    ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))
    ax.set_ylim(1.5, -0.5)
    for i in range(2):
        for j in range(2):
            ax.text(j, i, cm[i, j], ha='center', va='center', color='red')
    plt.savefig("./assets/images/confusion_matrix.jpg")
    print('Save image')

    print(classification_report(Y,model_logreg.predict(X)))
    return ([X_train, X_test, Y_train, Y_test])

"""PREDICT NEW DATA"""
def perform_task_LR(array_inputs,df):
    

    #new_colour = np.array(X_test.iloc[2]).reshape(1,-1)
    #new_colour = np.array(X_test.iloc[10]).reshape(1,-1)
    #print("X_test.iloc[10]")
    #print(new_colour)
    X_input_test = np.array(array_inputs)
    X_input_test = X_input_test.astype(np.float64)
    arr_2d       = np.reshape(X_input_test,[1,19])
    
   

    import lime
    import lime.lime_tabular
    feature_names = ['EverzolYellow3RS', 'EverzolYellowLX', 'EverzolYellowEDR', 'EverzolYellowED', 'EverzolYellowED2G', 'EverzolRedLX', 'EverzolRedF2B', 'EverzolRedED3B', 'EverzolRedED', 'EverzolBlueLX', 'EverzolBlueBRF', 'EverzolBlueEDG', 'EverzolNavyBlueFBN', 'EverzolNavyED', 'RemazolRoyalRGB', 'LevafixBlueCA', 'EverzolOrangeED2R', 'EverzolTurquoise133%', 'EverzolBlackEDR']


    saved_x_train = pd.read_json('./data/X_train.json')
    explainer     = lime.lime_tabular.LimeTabularExplainer(saved_x_train.values, feature_names=feature_names, class_names=['non_critical','critical'], mode='classification')
    exp           = explainer.explain_instance(X_input_test,model_logreg.predict_proba,num_features=19,top_labels=1)
    exp.save_to_file('./assets/images/explainer.html', labels=None, predict_proba=True, show_predicted_value=True)
    #exp.savefig("./assets/images/confusion_matrix.jpg")
    #s_html(labels=None, predict_proba=True, show_predicted_value=True, **kwargs)
    """INTERPRETE PREDICTION"""
    return([model_logreg.predict(arr_2d),X_input_test])



    