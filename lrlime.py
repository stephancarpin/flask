# -*- coding: utf-8 -*-
"""LRLIME.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jaseHKERDxJVIPgeaN6TOIDfIHXguOJ5

**CRITICAL COLOURS**

https://www.section.io/engineering-education/model-interpretation-using-lime/

IMPORT LIBRARIES
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

plt.switch_backend('Agg')
print("Using:",matplotlib.get_backend())

def perform_task(color1,color2,color3,color4,color5,color6,color7,color8,color9):
    # Machine learning classification
    """READ DATA"""

    df = pd.read_csv("./data/critical_colours_grouped.csv")

    df.head()

    """DEFINE FEATURES AND TARGET"""

    X = df.loc[:, df.columns != 'Class']

    Y = df.iloc[:,-1]

    class_names = Y.unique()

    """SPLIT TRAIN AND TEST DATA"""

    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=7)

    X_train.shape

    model_logreg = LogisticRegression()

    """FIT MODEL"""

    model_logreg.fit(X_train, Y_train)

    """PREDICTION"""

    model_logreg.predict(X_test)

    """ACCURACY"""

    accuracy_score(Y_test,model_logreg.predict(X_test))

    """CONFUSION MATRIX"""

    confusion_matrix(Y, model_logreg.predict(X))

    import matplotlib.pyplot as plt
    cm = confusion_matrix(Y, model_logreg.predict(X))
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.imshow(cm)
    ax.grid(False)
    ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))
    ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))
    ax.set_ylim(1.5, -0.5)
    for i in range(2):
        for j in range(2):
            ax.text(j, i, cm[i, j], ha='center', va='center', color='red')
    plt.show()

    print(classification_report(Y,model_logreg.predict(X)))

    """PREDICT NEW DATA"""

    new_colour = np.array(X_test.iloc[2]).reshape(1,-1)

    model_logreg.predict(new_colour)

    """INTERPRETE PREDICTION"""



    import lime
    import lime.lime_tabular

    feature_names = ['EverzolYellow3RS', 'EverzolYellowLX', 'EverzolYellowEDR', 'EverzolYellowED', 'EverzolYellowED2G', 'EverzolRedLX', 'EverzolRedF2B', 'EverzolRedED3B', 'EverzolRedED', 'EverzolBlueLX', 'EverzolBlueBRF', 'EverzolBlueEDG', 'EverzolNavyBlueFBN', 'EverzolNavyED', 'RemazolRoyalRGB', 'LevafixBlueCA', 'EverzolOrangeED2R', 'EverzolTurquoise133%', 'EverzolBlackEDR']

    #explainer = lime.lime_tabular.LimeTabularExplainer(X_train.values, discretize_continuous=True)
    #explainer = lime.lime_tabular.LimeTabularExplainer(X_train.values, feature_names=feature_names, class_names=class_names, discretize_continuous=True)

    #exp = explainer.explain_instance(X_test.iloc[2],model_logreg.predict_proba,num_features=19,top_labels=1)

    import lime
    from lime import lime_tabular

    explainer = lime_tabular.LimeTabularExplainer(
        training_data=np.array(X_train),
        feature_names=X_train.columns,
        class_names=['non_critical', 'critical'],
        mode='classification'
    )

    exp = explainer.explain_instance(
        data_row=X_test.iloc[1], 
        predict_fn=model_logreg.predict_proba
    )

    exp.show_in_notebook(show_table=True)

    exp.show_in_notebook(show_table=True, show_all=False)